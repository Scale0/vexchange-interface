{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x8d77f31c128c88b52a148167cdc5439cb4bb11db'\n\nexport const INIT_CODE_HASH = '0x6d8fda01dd70aef110c1159f6102cdabd7151a5d51bccabbf8e60051e1d26f73'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const VVET = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0x535b9a56c2f03a3658fc8787c44087574eb381fd',\n    18,\n    'VVET',\n    'Veiled Vet'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0x535b9a56c2f03a3658fc8787c44087574eb381fd',\n    18,\n    'VVET',\n    'Veiled Vet'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0x535b9a56c2f03a3658fc8787c44087574eb381fd',\n    18,\n    'VVET',\n    'Veiled Vet'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0x535b9a56c2f03a3658fc8787c44087574eb381fd', 18, 'VVET', 'Veiled Vet'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0x535b9a56c2f03a3658fc8787c44087574eb381fd', 18, 'VVET', 'Veiled Vet')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000\n} from '../constants'\n// import IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport IUniswapV2Pair from '../abis/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","MAINNET","Token","chainId","decimals","symbol","this","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","_CACHE2","_CACHE2$chainId","Contract","ERC20","then","_CACHE3","equals","other","equal","sortsBefore","toLowerCase","VVET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","IUniswapV2Pair","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","_Fraction","adjusted","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","slippage","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","exactQuote","getSlippage","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":"gJAKYA,EAQAC,EAKAC,+VAbAF,EAAAA,kBAAAA,4CAEVA,yBACAA,yBACAA,wBACAA,uBAGUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,+BAoBUC,EAfCC,EAAiB,qEAEjBC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAClBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAOT,EAAKC,OAAO,KACnBS,EAAQV,EAAKC,OAAO,MAEjC,SAAYJ,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMc,UACVd,EAAae,OAAQZ,EAAKC,OAAO,UACjCJ,EAAagB,SAAUb,EAAKC,OAAO,qlFC/CtC,QAAMa,EAAoB,mBAAoBC,OAEjCC,2FACyC,IAI7CC,KAAOC,EAAKC,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANnBC,QAUlCC,8FAC4C,IAIhDN,KAAOO,EAAKL,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANhBC,sSCNlCG,EAA6BC,EAAaC,GAC9C3B,EAAK4B,mBAAmBF,EAAOxB,IAAzC2B,MACU7B,EAAK8B,gBAAgBJ,EAAOf,EAAqBgB,KAA3DE,eAIcE,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,EAAeC,UACtBA,aAAqBpC,EACxBoC,EAEApC,EAAKC,OADgB,iBAAdmC,EACKA,EAAUC,WACVD,YAIFE,EAAKC,GACnBd,EAA6Bc,EAAG1C,EAAagB,aAEzC2B,EADAC,EAAUvC,KAEVF,EAAK0C,YAAYH,EAAGlC,OACtBoC,EAAIF,EACJC,EAAIxC,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGnC,GAAMD,GAC3BH,EAAK6C,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIxC,EAAK4C,OAAO5C,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGC,GAAIA,GAAIpC,QAEzCJ,EAAK8C,SAASP,EAAGrC,KAC1BuC,EAAItC,UAECsC,EAKT,SAAgBM,EAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApBpB,MAEUmB,EAAMG,QAAUF,GAA1BpB,MAGqB,IAAjBmB,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,KCrEnC,QAAIC,UACDjE,gBAAQkE,SAAU,8CAC6B,MAIrCC,yBA8BCC,EAAkB9B,EAAiB+B,EAAkBC,EAAiB/C,GAChFQ,EAA6BzB,EAAKC,OAAO8D,GAAWlE,EAAae,YAE5DkD,QAAUA,OACV9B,QAAUD,EAAwBC,QAClC+B,SAAWA,EACM,iBAAXC,IAAqBC,KAAKD,OAASA,GAC1B,iBAAT/C,IAAmBgD,KAAKhD,KAAOA,KA9B/BiD,mBACXJ,EACA9B,EACAmC,EACAH,EACA/C,0BAEMmD,UAaC,IAAIP,EAAMC,EAAS9B,EAASoC,EAAgBJ,EAAQ/C,aAjB3DkD,IAAAA,EAAWE,qBAAmBC,aAAWR,WAKA,2BAAhCH,0BAAAY,EAAQT,uBAARU,EAAmBxC,+BACtB2B,EAAMG,GAAS9B,oBACT,IAAIyC,WAASzC,EAAS0C,EAAOP,GAAUJ,WAAWY,MAAK,SAACZ,oBAC5DJ,SACKA,cACFG,oBACIH,sBAAAiB,EAAQd,eACV9B,GAAU+B,UAGRA,8EAejBc,OAAA,SAAOC,OACCC,EAAQd,KAAKH,UAAYgB,EAAMhB,SAAWG,KAAKjC,UAAY8C,EAAM9C,eACnE+C,IACQd,KAAKF,WAAae,EAAMf,UAAlClC,MACIoC,KAAKD,QAAUc,EAAMd,QAAkBC,KAAKD,SAAWc,EAAMd,QAAhCnC,MAC7BoC,KAAKhD,MAAQ6D,EAAM7D,MAAgBgD,KAAKhD,OAAS6D,EAAM7D,MAA9BY,OAExBkD,KAGTC,YAAA,SAAYF,UACAb,KAAKH,UAAYgB,EAAMhB,SAAjCjC,MACUoC,KAAKjC,UAAY8C,EAAM9C,SAAjCH,MACOoC,KAAKjC,QAAQiD,cAAgBH,EAAM9C,QAAQiD,oBAIzCC,WACVxF,gBAAQkE,SAAU,IAAIC,GACrBnE,gBAAQkE,QACR,6CACA,GACA,OACA,gBAEDlE,gBAAQyF,SAAU,IAAItB,GACrBnE,gBAAQyF,QACR,6CACA,GACA,OACA,gBAEDzF,gBAAQ0F,SAAU,IAAIvB,GACrBnE,gBAAQ0F,QACR,6CACA,GACA,OACA,gBAED1F,gBAAQ2F,OAAQ,IAAIxB,GAAMnE,gBAAQ2F,MAAO,6CAA8C,GAAI,OAAQ,gBACnG3F,gBAAQ4F,OAAQ,IAAIzB,GAAMnE,gBAAQ4F,MAAO,6CAA8C,GAAI,OAAQ,47NCtFhGC,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,WACHhG,iBAASiG,YAAaN,GAAQM,aAC9BjG,iBAASkG,eAAgBP,GAAQO,gBACjClG,iBAASmG,UAAWR,GAAQQ,YAGzBC,WACHpG,iBAASiG,gBACTjG,iBAASkG,mBACTlG,iBAASmG,eAGCE,yBAICC,EAAsBC,YAAAA,IAAAA,EAAyBhG,QACpD+F,UAAY/D,EAAe+D,QAC3BC,YAAchE,EAAegE,8BAapCC,OAAA,kBACS,IAAIH,EAAShC,KAAKkC,YAAalC,KAAKiC,cAG7CvD,IAAA,SAAImC,OACIuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAChF9E,EAAK+E,MAAMd,KAAKkC,YAAaE,EAAYF,aACpC,IAAIF,EAASjG,EAAK2C,IAAIsB,KAAKiC,UAAWG,EAAYH,WAAYjC,KAAKkC,aAErE,IAAIF,EACTjG,EAAK2C,IACH3C,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASD,EAAYH,UAAWjC,KAAKkC,cAE5CnG,EAAKsG,SAASrC,KAAKkC,YAAaE,EAAYF,iBAIhDI,SAAA,SAASzB,OACDuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAChF9E,EAAK+E,MAAMd,KAAKkC,YAAaE,EAAYF,aACpC,IAAIF,EAASjG,EAAKuG,SAAStC,KAAKiC,UAAWG,EAAYH,WAAYjC,KAAKkC,aAE1E,IAAIF,EACTjG,EAAKuG,SACHvG,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASD,EAAYH,UAAWjC,KAAKkC,cAE5CnG,EAAKsG,SAASrC,KAAKkC,YAAaE,EAAYF,iBAIhDtD,SAAA,SAASiC,OACDuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAC7E9E,EAAK6C,SACV7C,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASD,EAAYH,UAAWjC,KAAKkC,iBAI9CK,QAAA,SAAQ1B,OACAuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAC7E9E,EAAK+E,MACV/E,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASD,EAAYH,UAAWjC,KAAKkC,iBAI9CzD,YAAA,SAAYoC,OACJuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAC7E9E,EAAK0C,YACV1C,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASD,EAAYH,UAAWjC,KAAKkC,iBAI9CG,SAAA,SAASxB,OACDuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAC7E,IAAImB,EACTjG,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYH,WAC1ClG,EAAKsG,SAASrC,KAAKkC,YAAaE,EAAYF,iBAIhDvD,OAAA,SAAOkC,OACCuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS9D,EAAe2C,WAC7E,IAAImB,EACTjG,EAAKsG,SAASrC,KAAKiC,UAAWG,EAAYF,aAC1CnG,EAAKsG,SAASrC,KAAKkC,YAAaE,EAAYH,eAIhDO,cAAA,SACEC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBhH,iBAASkG,eAEpBgB,OAAOC,UAAUL,IAA3B7E,MACU6E,EAAoB,GAA9B7E,MAEA0D,GAAQyB,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUhB,GAAsBgB,SAC1EM,EAAW,IAAI3B,GAAQtB,KAAKiC,UAAU7D,YACzC8E,IAAIlD,KAAKkC,YAAY9D,YACrB+E,oBAAoBV,UAChBQ,EAAS1B,SAAS0B,EAASG,gBAAiBV,MAGrDW,QAAA,SACED,EACAV,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBhH,iBAASkG,eAEpBgB,OAAOC,UAAUM,IAA3BxF,MACUwF,GAAiB,GAA3BxF,MAEA6D,GAAI6B,GAAKF,EACT3B,GAAI8B,GAAKxB,GAAgBY,GAClB,IAAIlB,GAAIzB,KAAKiC,UAAU7D,YAAY8E,IAAIlD,KAAKkC,YAAY9D,YAAYmD,SAAS6B,EAAeV,+CAzG5F3G,EAAK4C,OAAOqB,KAAKiC,UAAWjC,KAAKkC,sDAKjC,IAAIF,EAASjG,EAAKyH,UAAUxD,KAAKiC,UAAWjC,KAAKkC,aAAclC,KAAKkC,sBC/BzET,GAAMF,EAASG,GAER+B,0BAICC,EAAcC,SAClBC,EAAe1F,EAAeyF,UACpCnG,EAA6BoG,EAAchI,EAAagB,wBAElDgH,EAAc7H,EAAK8H,aAAavH,EAAKP,EAAKC,OAAO0H,EAAM5D,mBACxD4D,MAAQA,sCAOfhF,IAAA,SAAImC,UACQb,KAAK0D,MAAM9C,OAAOC,EAAM6C,QAAlC9F,MACO,IAAI6F,EAAYzD,KAAK0D,MAAO3H,EAAK2C,IAAIsB,KAAK8D,IAAKjD,EAAMiD,SAG9DxB,SAAA,SAASzB,UACGb,KAAK0D,MAAM9C,OAAOC,EAAM6C,QAAlC9F,MACO,IAAI6F,EAAYzD,KAAK0D,MAAO3H,EAAKuG,SAAStC,KAAK8D,IAAKjD,EAAMiD,SAGnEtB,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,YAAoBE,IAAAA,EAAqBhH,iBAASiG,wBAC7EY,wBAAcC,EAAmBC,EAAQC,MAGxDU,QAAA,SACED,EACAV,EACAC,mBAFAS,IAAAA,EAAwBpD,KAAK0D,MAAM5D,mBAEnC6C,IAAAA,EAAqBhH,iBAASiG,YAEpBwB,GAAiBpD,KAAK0D,MAAM5D,UAAtClC,kBACayF,kBAAQD,EAAeV,EAAQC,MAG9CoB,QAAA,SAAQrB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KACzCnB,GAAI6B,GAAKtD,KAAK0D,MAAM5D,SACb,IAAI2B,GAAIzB,KAAKiC,UAAU7D,YAAY8E,IAAIlD,KAAKkC,YAAY9D,YAAYmD,SAASmB,0CA5B7E1C,KAAKiC,iBAbiBD,ICc7BtC,GAA0E,GAEjEsE,yBAoCCC,EAA2BC,OAC/BC,EAAeF,EAAaP,MAAM3C,YAAYmD,EAAaR,OAC7D,CAACO,EAAcC,GACf,CAACA,EAAcD,QACdG,eAAiB,IAAIxE,GACxBuE,EAAa,GAAGT,MAAM7D,QACtBmE,EAAKhG,WAAWmG,EAAa,GAAGT,MAAOS,EAAa,GAAGT,OACvD,GACA,SACA,mBAEGS,aAAeA,IA3CfnG,WAAP,SAAkBqG,EAAeC,iBACzBC,EAASF,EAAOtD,YAAYuD,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,eAEhBG,eAApD9E,6BAAQ6E,EAAO,GAAGxG,+BAAWwG,EAAO,GAAGxG,YACzC2B,UACKA,eACF6E,EAAO,GAAGxG,0BACN2B,uBAAAY,EAAQiE,EAAO,GAAGxG,qBACpBwG,EAAO,GAAGxG,SAAU0G,oBNhBA,6CMkBnBC,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACJ,EAAO,GAAGxG,QAASwG,EAAO,GAAGxG,YACjFlC,YAMD6D,GAAM6E,EAAO,GAAGxG,SAASwG,EAAO,GAAGxG,YAG/BkC,mBACXoE,EACAC,EACApE,gBAAAA,IAAAA,EAAWE,qBAAmBC,aAAWgE,EAAOxE,WAEtCwE,EAAOxE,UAAYyE,EAAOzE,SAApCjC,UACMG,EAAUiG,EAAKhG,WAAWqG,EAAQC,0BACH,IAAI9D,WAASzC,EAAS6G,GAAoB1E,GAAU2E,qCAAlFC,OAAWC,OACZC,EAAWX,EAAOtD,YAAYuD,GAAU,CAACQ,EAAWC,GAAa,CAACA,EAAWD,UAC5E,IAAId,EAAK,IAAIP,GAAYY,EAAQW,EAAS,IAAK,IAAIvB,GAAYa,EAAQU,EAAS,uEAiCzFC,UAAA,SAAUvB,UACEA,EAAM9C,OAAOZ,KAAKkF,SAAWxB,EAAM9C,OAAOZ,KAAKmF,SAAzDvH,MACO8F,EAAM9C,OAAOZ,KAAKkF,QAAUlF,KAAKoF,SAAWpF,KAAKqF,YAG1DC,gBAAA,SAAgBC,MACJA,EAAY7B,MAAM9C,OAAOZ,KAAKkF,SAAWK,EAAY7B,MAAM9C,OAAOZ,KAAKmF,SAAjFvH,MACI7B,EAAK+E,MAAMd,KAAKoF,SAAStB,IAAK7H,IAASF,EAAK+E,MAAMd,KAAKqF,SAASvB,IAAK7H,SACjE,IAAIc,MAENyI,EAAexF,KAAKiF,UAAUM,EAAY7B,OAC1C+B,EAAgBzF,KAAKiF,UAAUM,EAAY7B,MAAM9C,OAAOZ,KAAKkF,QAAUlF,KAAKmF,OAASnF,KAAKkF,QAC1FQ,EAAqB3J,EAAKsG,SAASkD,EAAYzB,IAAKtH,GACpDyF,EAAYlG,EAAKsG,SAASqD,EAAoBD,EAAc3B,KAC5D5B,EAAcnG,EAAK2C,IAAI3C,EAAKsG,SAASmD,EAAa1B,IAAKrH,GAAQiJ,GAC/DC,EAAe,IAAIlC,GACvB8B,EAAY7B,MAAM9C,OAAOZ,KAAKkF,QAAUlF,KAAKmF,OAASnF,KAAKkF,OAC3DnJ,EAAK4C,OAAOsD,EAAWC,OAErBnG,EAAK+E,MAAM6E,EAAa7B,IAAK7H,SACzB,IAAIqB,QAEL,CAACqI,EAAc,IAAI3B,EAAKwB,EAAa9G,IAAI6G,GAAcE,EAAcnD,SAASqD,QAGvFC,eAAA,SAAeD,MACHA,EAAajC,MAAM9C,OAAOZ,KAAKkF,SAAWS,EAAajC,MAAM9C,OAAOZ,KAAKmF,SAAnFvH,MAEE7B,EAAK+E,MAAMd,KAAKoF,SAAStB,IAAK7H,IAC9BF,EAAK+E,MAAMd,KAAKqF,SAASvB,IAAK7H,IAC9BF,EAAK4B,mBAAmBgI,EAAa7B,IAAK9D,KAAKiF,UAAUU,EAAajC,OAAOI,WAEvE,IAAI/G,MAGN0I,EAAgBzF,KAAKiF,UAAUU,EAAajC,OAC5C8B,EAAexF,KAAKiF,UAAUU,EAAajC,MAAM9C,OAAOZ,KAAKkF,QAAUlF,KAAKmF,OAASnF,KAAKkF,QAC1FjD,EAAYlG,EAAKsG,SAAStG,EAAKsG,SAASmD,EAAa1B,IAAK6B,EAAa7B,KAAMrH,GAC7EyF,EAAcnG,EAAKsG,SAAStG,EAAKuG,SAASmD,EAAc3B,IAAK6B,EAAa7B,KAAMtH,GAChF+I,EAAc,IAAI9B,GACtBkC,EAAajC,MAAM9C,OAAOZ,KAAKkF,QAAUlF,KAAKmF,OAASnF,KAAKkF,OAC5DnJ,EAAK2C,IAAI3C,EAAK4C,OAAOsD,EAAWC,GAAchG,UAEzC,CAACqJ,EAAa,IAAIvB,EAAKwB,EAAa9G,IAAI6G,GAAcE,EAAcnD,SAASqD,QAGtFE,mBAAA,SAAmBC,EAA0B7B,EAA2BC,GAC5D4B,EAAYpC,MAAM9C,OAAOZ,KAAKoE,iBAAxCxG,UAMImI,EALE5B,EAAeF,EAAaP,MAAM3C,YAAYmD,EAAaR,OAC7D,CAACO,EAAcC,GACf,CAACA,EAAcD,MACTE,EAAa,GAAGT,MAAM9C,OAAOZ,KAAKkF,SAAWf,EAAa,GAAGT,MAAM9C,OAAOZ,KAAKmF,SAAzFvH,MAGI7B,EAAK+E,MAAMgF,EAAYhC,IAAK7H,GAC9B8J,EAAYhK,EAAKuG,SAASjE,EAAKtC,EAAKsG,SAAS8B,EAAa,GAAGL,IAAKK,EAAa,GAAGL,MAAOhI,OACpF,KACCkK,EAAUjK,EAAK4C,OAAO5C,EAAKsG,SAAS8B,EAAa,GAAGL,IAAKgC,EAAYhC,KAAM9D,KAAKoF,SAAStB,KACzFmC,EAAUlK,EAAK4C,OAAO5C,EAAKsG,SAAS8B,EAAa,GAAGL,IAAKgC,EAAYhC,KAAM9D,KAAKqF,SAASvB,KAC/FiC,EAAYhK,EAAK8B,gBAAgBmI,EAASC,GAAWD,EAAUC,MAE5DlK,EAAK0C,YAAYsH,EAAW9J,SACzB,IAAIqB,SAEL,IAAImG,GAAYzD,KAAKoE,eAAgB2B,MAG9CG,kBAAA,SACExC,EACAoC,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGPzC,EAAM9C,OAAOZ,KAAKkF,SAAWxB,EAAM9C,OAAOZ,KAAKmF,SAAzDvH,MACUkI,EAAYpC,MAAM9C,OAAOZ,KAAKoE,iBAAxCxG,MACUmI,EAAUrC,MAAM9C,OAAOZ,KAAKoE,iBAAtCxG,MACU7B,EAAK8B,gBAAgBkI,EAAUjC,IAAKgC,EAAYhC,MAA1DlG,MAGKuI,EAEE,CACOC,GAAZxI,UACM0I,EAAcpI,EAAekI,MAC9BrK,EAAK+E,MAAMwF,EAAarK,GAY3BoK,EAAsBP,MAZY,KAC5BS,EAAQlI,EAAKtC,EAAKsG,SAASrC,KAAKoF,SAAStB,IAAK9D,KAAKqF,SAASvB,MAC5D0C,EAAYnI,EAAKiI,MACnBvK,EAAK0C,YAAY8H,EAAOC,GAAY,KAChCvE,EAAYlG,EAAKsG,SAASyD,EAAYhC,IAAK/H,EAAKuG,SAASiE,EAAOC,IAChEtE,EAAcnG,EAAK2C,IAAI3C,EAAKsG,SAASkE,EAAOlK,GAAOmK,GACnDC,EAAe1K,EAAK4C,OAAOsD,EAAWC,GAC5CmE,EAAsBP,EAAYpH,IAAI,IAAI+E,GAAYzD,KAAKoE,eAAgBqC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAIrC,GACTC,EACA3H,EAAK4C,OAAO5C,EAAKsG,SAAS0D,EAAUjC,IAAK9D,KAAKiF,UAAUvB,GAAOI,KAAMuC,EAAoBvC,gDAtHpF9D,KAAKmE,aAAa,GAAGT,4CAIrB1D,KAAKmE,aAAa,GAAGT,8CAIrB1D,KAAKmE,aAAa,2CAIlBnE,KAAKmE,aAAa,YClFhBuC,0BAkBCC,EAAkBC,EAAmB1E,EAAwBD,8BACjEA,EAAWC,UAEZyE,UAAYA,IACZC,WAAaA,IACbC,OAAS,IAAI7E,GAChBjG,EAAK8H,aAAavH,EAAKP,EAAKC,OAAO2K,EAAU7G,WAC7C/D,EAAK8H,aAAavH,EAAKP,EAAKC,OAAO4K,EAAW9G,uBApB3CgH,UAAP,SAAiBC,aACTC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAO7H,KACL4H,EAAMK,WAAQxG,OAAOuG,EAAKjC,QACtB,IAAIwB,EAAMS,EAAK/B,SAAS1B,MAAOyD,EAAK9B,SAAS3B,MAAOyD,EAAK/B,SAAStB,IAAKqD,EAAK9B,SAASvB,KACrF,IAAI4C,EAAMS,EAAK9B,SAAS3B,MAAOyD,EAAK/B,SAAS1B,MAAOyD,EAAK9B,SAASvB,IAAKqD,EAAK/B,SAAStB,aAGtFkD,EAAOK,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlF,SAASmF,KAAeR,EAAO,gCAuB1G7E,OAAA,kBACS,IAAIuE,EAAM1G,KAAK4G,WAAY5G,KAAK2G,UAAW3G,KAAKiC,UAAWjC,KAAKkC,gBAGzEG,SAAA,SAASxB,GACGb,KAAK4G,WAAWhG,OAAOC,EAAM8F,YAAvC/I,UACM6J,cAAiBpF,mBAASxB,UACzB,IAAI6F,EAAM1G,KAAK2G,UAAW9F,EAAM+F,WAAYa,EAASvF,YAAauF,EAASxF,cAIpFyF,MAAA,SAAMC,UACMA,EAAYjE,MAAM9C,OAAOZ,KAAK2G,YAAxC/I,MACO,IAAI6F,GAAYzD,KAAK4G,WAAYgB,YAAMvF,mBAASsF,EAAY7D,KAAKb,aAG1ET,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACjCzC,KAAK6H,SAASrF,cAAcC,EAAmBC,EAAQC,MAGhEU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GACvBpD,KAAK6H,SAASxE,QAAQD,EAAeV,EAAQC,0CA5B7C,IAAIX,GAAShC,KAAKiC,UAAWjC,KAAKkC,iEAI5BG,mBAASrC,KAAK6G,eAlCJ7E,ICHd8F,yBAKCb,EAAec,GACfd,EAAM/H,OAAS,GAAzBtB,MAEEqJ,EAAMe,KAAI,SAAAb,UAAQA,EAAKjC,OAAOrF,UAAYoH,EAAM,GAAG/B,OAAOrF,WAASoI,OAAM,SAAA1J,UAAKA,MADhFX,gBAIMwJ,EAAO,CAACW,OACUd,EAAMC,0BAAW,eAA1BC,OACPe,EAAed,QACXc,EAAatH,OAAOuG,EAAKjC,SAAWgD,EAAatH,OAAOuG,EAAKhC,SAAvEvH,UACMuK,EAASD,EAAatH,OAAOuG,EAAKjC,QAAUiC,EAAKhC,OAASgC,EAAKjC,OACrEkC,EAAKjI,KAAKgJ,GAEFf,EAAKlI,SAAW,IAAIkJ,IAAIhB,GAAMiB,MAAxCzK,WAEKqJ,MAAQA,OACRG,KAAOA,OACPkB,SAAW5B,GAAMI,UAAU9G,qDAIzBA,KAAKoH,KAAK,yCAIVpH,KAAKoH,KAAKpH,KAAKoH,KAAKlI,OAAS,YCjClCqJ,GAAe,IAAIvG,GAASzF,GAErBiM,mGACXhG,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACjCzC,KAAKqC,SAASkG,IAAc/F,cAAcC,EAAmBC,EAAQC,MAG9EU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GACvBpD,KAAKqC,SAASkG,IAAclF,QAAQD,EAAeV,EAAQC,OANzCX,aCqBbyG,GAAsBC,EAAgBC,UAE1CD,EAAEnD,YAAY7B,MAAM9C,OAAO+H,EAAEpD,YAAY7B,QAAnD9F,MACU8K,EAAE/C,aAAajC,MAAM9C,OAAO+H,EAAEhD,aAAajC,QAArD9F,MACI8K,EAAE/C,aAAapD,QAAQoG,EAAEhD,cACvB+C,EAAEnD,YAAYhD,QAAQoG,EAAEpD,aACnB,EAGLmD,EAAEnD,YAAY3G,SAAS+J,EAAEpD,cACnB,EAED,EAILmD,EAAE/C,aAAa/G,SAAS+J,EAAEhD,cACrB,GAEC,WAMEiD,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,SAASlK,SAAS+J,EAAEG,WAChB,EACCJ,EAAEI,SAASrK,YAAYkK,EAAEG,UAC3B,EAIFJ,EAAE3B,MAAMK,KAAKlI,OAASyJ,EAAE5B,MAAMK,KAAKlI,OAU5C,IAAa6J,yBASQhC,EAAcpD,EAAqBqF,GAC1CrF,EAAOD,MAAM9C,OAAOoI,IAActN,kBAAUuN,YAAclC,EAAMgB,MAAQhB,EAAMoB,SAAxFvK,UACMsL,EAAyB,IAAIC,MAAMpC,EAAMK,KAAKlI,QAC9CkK,EAAoB,IAAID,MAAMpC,EAAME,MAAM/H,WAC5C8J,IAActN,kBAAUuN,YAAa,CACvCC,EAAQ,GAAKvF,MACR,IAAI0F,EAAI,EAAGA,EAAItC,EAAMK,KAAKlI,OAAS,EAAGmK,IAAK,OACjCtC,EAAME,MAAMoC,GACa/D,gBAAgB4D,EAAQG,IAAzCC,OACrBJ,EAAQG,EAAI,QACZD,EAAUC,GAAKC,OAEZ,CACLJ,EAAQA,EAAQhK,OAAS,GAAKyE,MACzB,IAAI0F,EAAItC,EAAMK,KAAKlI,OAAS,EAAGmK,EAAI,EAAGA,IAAK,OACjCtC,EAAME,MAAMoC,EAAI,GACQzD,eAAesD,EAAQG,IAAxCC,OACpBJ,EAAQG,EAAI,QACZD,EAAUC,EAAI,GAAKC,QAIlBvC,MAAQA,OACRiC,UAAYA,MACXzD,EAAc2D,EAAQ,GACtBvD,EAAeuD,EAAQA,EAAQhK,OAAS,QACzCqG,YAAcA,OACdI,aAAeA,OACf4D,eAAiB,IAAI7C,GAAMK,EAAMgB,MAAOhB,EAAMoB,OAAQ5C,EAAYzB,IAAK6B,EAAa7B,UACpF0F,aAAe9C,GAAMI,UAAU,IAAIgB,GAAMsB,EAAWrC,EAAMgB,aAC1De,SAvGT,SAAqBR,EAAiB/C,EAA0BI,OACxD8D,EAAanB,EAASxE,IAAIzB,SAASkD,EAAYzB,KAE/CgF,EAAWW,EAAWnH,SAASqD,EAAa7B,KAAKnF,OAAO8K,UACvD,IAAIjB,GAAQM,EAAS7G,UAAW6G,EAAS5G,aAmG9BwH,CAAY3C,EAAMuB,SAAU/C,EAAaI,8BAIpDgE,iBAAA,SAAiBC,UACXA,EAAkBhL,SAAS3C,IAAtC2B,MACIoC,KAAKgJ,YAActN,kBAAUmO,aACxB7J,KAAK2F,aAEL,IAAIlC,GACTzD,KAAK2F,aAAajC,MAClB,IAAI1B,GAAS9F,GACVwC,IAAIkL,GACJzH,SACAE,SAASrC,KAAK2F,aAAa7B,KAAKb,aAMlC6G,gBAAA,SAAgBF,UACVA,EAAkBhL,SAAS3C,IAAtC2B,MACIoC,KAAKgJ,YAActN,kBAAUuN,YACxBjJ,KAAKuF,YAEL,IAAI9B,GACTzD,KAAKuF,YAAY7B,MACjB,IAAI1B,GAAS9F,GAAKwC,IAAIkL,GAAmBvH,SAASrC,KAAKuF,YAAYzB,KAAKb,aAShE8G,iBAAP,SACL9C,EACA+C,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAgCH,YAChCI,IAAAA,EAAsB,IAEZnD,EAAM/H,OAAS,GAAzBtB,MACU0M,EAAU,GAApB1M,MACUuM,IAAqBH,GAAYE,EAAahL,OAAS,GAAjEtB,UAEK,IAAIyL,EAAI,EAAGA,EAAIpC,EAAM/H,OAAQmK,IAAK,KAC/BlC,EAAOF,EAAMoC,OAEdlC,EAAKjC,OAAOtE,OAAOoJ,EAAStG,QAAWyD,EAAKhC,OAAOvE,OAAOoJ,EAAStG,UACpEyD,EAAK/B,SAAS7C,QAAQtG,KAASkL,EAAK9B,SAAS9C,QAAQtG,QAErDsO,aAEAA,EAAapD,EAAK7B,gBAAgB0E,MACpC,MAAO/L,MAEHA,EAAMuM,8CAGJvM,KAGJsM,EAAW7G,MAAM9C,OAAOqJ,GAC1BnL,EACEsL,EACA,IAAIrB,EACF,IAAIjB,aAAUoC,GAAc/C,IAAOgD,EAAiBzG,OACpDyG,EACAzO,kBAAUuN,aAEZoB,EACAzB,SAEG,GAAI0B,EAAU,GAAKrD,EAAM/H,OAAS,EAAG,KACpCuL,EAAyBxD,EAAMI,MAAM,EAAGgC,GAAGqB,OAAOzD,EAAMI,MAAMgC,EAAI,EAAGpC,EAAM/H,SAGjF6J,EAAMgB,iBACJU,EACAF,EACAN,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAc/C,IAClBgD,EACAC,YAKCA,KAQKO,kBAAP,SACL1D,EACA2D,EACAL,IAGAL,EACAW,EACAT,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBW,IAAAA,EAAiCN,YACjCH,IAAAA,EAAsB,IAEZnD,EAAM/H,OAAS,GAAzBtB,MACU0M,EAAU,GAApB1M,MACUiN,IAAsBN,GAAaL,EAAahL,OAAS,GAAnEtB,UAEK,IAAIyL,EAAI,EAAGA,EAAIpC,EAAM/H,OAAQmK,IAAK,KAC/BlC,EAAOF,EAAMoC,OAEdlC,EAAKjC,OAAOtE,OAAO2J,EAAU7G,QAAWyD,EAAKhC,OAAOvE,OAAO2J,EAAU7G,UACtEyD,EAAK/B,SAAS7C,QAAQtG,KAASkL,EAAK9B,SAAS9C,QAAQtG,QAErD+N,aAEAA,EAAY7C,EAAKvB,eAAe2E,MAClC,MAAOtM,MAEHA,EAAM6M,2CAGJ7M,KAGJ+L,EAAUtG,MAAM9C,OAAOgK,GACzB9L,EACEsL,EACA,IAAIrB,EAAM,IAAIjB,IAAOX,UAAS+C,GAAeU,GAAUC,EAAmBnP,kBAAUmO,cACpFQ,EACAzB,SAEG,GAAI0B,EAAU,GAAKrD,EAAM/H,OAAS,EAAG,KACpCuL,EAAyBxD,EAAMI,MAAM,EAAGgC,GAAGqB,OAAOzD,EAAMI,MAAMgC,EAAI,EAAGpC,EAAM/H,SAGjF6J,EAAM4B,kBACJF,EACAG,EACAZ,EACA,CACEK,cAAAA,EACAC,QAASA,EAAU,IAEpBnD,UAAS+C,GACVW,EACAT,YAKCA,+CV5PoB"}